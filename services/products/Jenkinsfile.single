pipeline {
  agent any
  parameters {
    string(name:'REGISTRY',defaultValue:'your-org',description:'Docker registry/org')
    string(name:'TAG',defaultValue:'${BUILD_NUMBER}',description:'Image tag')
    booleanParam(name:'PUSH_IMAGE',defaultValue:true,description:'Push after build')
    booleanParam(name:'DEPLOY_EKS',defaultValue:false,description:'Deploy to EKS')
    string(name:'AWS_REGION',defaultValue:'ap-south-1')
    string(name:'EKS_CLUSTER',defaultValue:'<cluster-name>')
    string(name:'K8S_NAMESPACE',defaultValue:'microdemo')
    credentials(name:'DOCKERHUB_CREDS',defaultValue:'',description:'Docker creds (optional)')
  }
  environment { IMAGE_TAG="${TAG}"; REGISTRY="${REGISTRY}" }
  stages {
    stage('Checkout') { steps { checkout scm } }
    stage('Install & Test') { steps { dir('services/products') { sh 'npm ci || npm install'; sh 'npm test' } } }
    stage('Build Image') { steps { sh "docker build -t $REGISTRY/products:$IMAGE_TAG services/products" } }
    stage('Push (optional)') {
      when { expression { return params.PUSH_IMAGE } }
      steps {
        script { if (params.DOCKERHUB_CREDS) { withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDS, usernameVariable: 'U', passwordVariable: 'P')]) { sh 'echo "$P" | docker login -u "$U" --password-stdin' } } }
        sh "docker push $REGISTRY/products:$IMAGE_TAG"
      }
    }
    stage('Deploy (optional)') {
      when { expression { return params.DEPLOY_EKS } }
      steps {
        sh '''
          aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER
          kubectl -n $K8S_NAMESPACE apply -f services/products/k8s/
          kubectl -n $K8S_NAMESPACE set image deploy/products products=$REGISTRY/products:$IMAGE_TAG --record=true
          kubectl -n $K8S_NAMESPACE rollout status deploy/products --timeout=120s
        '''
      }
    }
  }
}